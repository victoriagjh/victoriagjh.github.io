---
title:  "OAuth란?"
date: 2019-10-27 22:25:00
description: The history of Development Study
categories: [devKnowledge]
resource: true
comments: true

---

# OAuth란?

### `OAuth`

OAuth는 인터넷 사용자들이 비밀번호를 제공하지 않고, 다른 웹사이트 상의 자신들의 정보에 대해 웹사이트나 어플리케이션의 접근권한을 부여할 수 있는 공통적인 수단으로서 사용되는, 접근 위임을 위한 개방형 표준이다!

라고 했지만 잘 이해가 가지 않으니, 더 친절히 설명된 글을 읽어보자

Facebook과 Tweeter를 생각해보자! 각 프로그램은 외부 서비스에서 Facebook이나 Tweeter의 일부 기능을 사용할 수 있게 한 것이다. 이때 외부 서비스와 연동되는 Facebook이나 Tweeter에 직접 로그인해야 하는 것이 아니라, 별도의 인증 절차를 거치면 다른 서비스에서 Facebookrhk Tweeter의 기능을 이용할 수 있게 된다. 이러한 방식에서 사용되는 **인증 절차가 OAuth이다!**

###### "웹, 앱 서비스에서 제한적으로 권한을 요청해 사용할 수 있는 키를 발급해주는것"

그래도 이해가 되지 않는다면, 이 예시를 보자!

> 어떤 사원이 자신의 사원증을 이용하여 회사에 출입 및 활동을 하는 것은 **"로그인"** 이고, 어떤 이가 안내데스크에서 방문증을 수령하여 출입하는 것은 **"OAuth"**라고 할 수 있다. <br>
>
> 방문증은 사전에 정해진 곳만 다닐 수 있는 것이기 때문에, 방문증을 가진 사람의 권한과 사원증을 가진 사람의 권한은 다르다. 즉, 직접 서비스에 로그인한 사용자와 OAuth를 이용해 권한을 인증받은 사용자가 할 수 있는 일은 다르다.



OAuth는 인증을 위한 오픈 스탠더드 프로토콜로, 사용자가 Facebook이나 트위터 같은 인터넷 서비스의 기능을 다른 어플리케이션(데스크톱, 웹, 모바일 등)에서도 사용할 수 있게 한 것이다.

OAuth 1.0 : 비공식 논의체에 의해 최초로 만들어진 것

OAuth 2.0 : 드래프트 단계에 있는 것으로, IEFT OAuth 워킹 그룹이 주축이 되어 만든 것이다. OAuth 2.0은 1.0과 호환되지 않지만, 인증 절차가 간략하다는 장점이 있다. 아직 최종안이 나오진 않았지만, 여러 인터넷 서비스에서 OAuth2.0을 사용하고 있다.

### `OAuth의 구성`

1. Resource Owner(사용자)
2. Authorization Server(인증 서버)
3. Resource Server(REST API)
4. Client

- Authorization Code 

  웹 서버에서 API를 호출하는 등의 시나리오에서 Confidential Client가 사용하는 방식이다. 서버사이드 코드가 필요한 인증방식이며, 인증과정에서 Client_secret이 필요하다. 로그인시에는 URL에 response_type = code라고 넘긴다.

- Implicit

  Token과 Scope에 대한 스펙 등은 다르지만, OAuth 1.0a와 가장 비슷한 인증방식이다. Public Client인 브라우저 기반의 어플리케이션(Javascript application)이나 모바일 어플리케이션에서 이 방식을 사용하면 된다. Client 증명서를 사용할 필요가 없으며 실제로 OAuth 2.0에서 가장 많이 사용되는 방식이다. 로그인시에는 페이지 URL에 response_type=token이라고 넘긴다.

- Resource Owner Password Credentials

- Client Credentials